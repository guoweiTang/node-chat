#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-chat:server');
var http = require('http');
var sio = require('socket.io');

//所有已建立聊天通信用户的套接字仓库
var allSockets = {};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = sio.listen(server);
io.sockets.on('connection', function(socket) {

    //设置套接字(包括登录用户信息)
    var connectionQuery = socket.handshake.query;
    if(!connectionQuery)return;

    allSockets[connectionQuery.id] = socket;

    socket.on('message', function(data, fn) {
        fn(+ new Date());

        let theSessionId = data.content.sessionId;
        //发送普通聊天消息
        if(data.type === 'IM_SEND_MESSAGE'){
            let tempSesssionIdArr = theSessionId.split('-');
            data.content.sessionId = tempSesssionIdArr.reverse().join('-')
            //如果对方在线，把消息推送给对方
            let othersId = tempSesssionIdArr[0];
            if(allSockets[othersId]){
                allSockets[othersId].emit('message', data);
            }
        //状态消息
        }else if(data.type === 'IM_SESSION_UPDATE'){
            socket.emit('message', data);
        }
    })
    socket.emit('connect');
})




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}